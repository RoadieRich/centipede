<!DOCTYPE html>
<html>
  <head>
    <title>Flow Control - Centipede Tutorial</title>
    <link rel="stylesheet" type="text/css" href="style.css"/>
    <style type="text/css" media="scr"></style>
</head>
  <body>
    <h1 style="counter-reset: h1 5;">Flow Control</h1>
    <p>
      Sometimes you will find that certain actions only need to be done sometimes, or might need to be done multiple 
      times.  This is where flow control comes in.
    </p>
    <h2 id="variables">Variables</h2>
    <p>
      Whether to execute an action, or the number of times to do so, is controlled by variables.  You have already 
      encountered these briefly in <a href="arguments.htm">Arguments</a>.
      A variable is essentially a named region of memory that you can store a value in, so you can easily find, and use
      it again later.
    </p>
    <p>
      Variables are created automatically whenever you store a value, and you can 
      overwrite that value as many times as you need to.</p>
    <h3>Variable Action</h3>
    <img src="http://placehold.it/500x150&text=Variable+Action" alt="Variable Action"/>
    <p>
      The easiest way of creating or modifying a variable is to use a <i>Variable Action</i>.  This requires an 
      <i>expression</i> and a <i>variable name</i> to store it.</p>
    <p>
      The simplest expression is a "literal", for example, <kbd>0</kbd> or <kbd>"Hello world!"</kbd>,
      but it can be more complex, involving any combination of variables and literals, for example, <kbd>(4 / 3.0) * 
      3.142 * radius ** 3</kbd>, or even function calls: <kbd>math.sqrt(math.pow(a, 2) + math.pow(b, 2))</kbd>.
    </p>
    <h2 id="branching" onclick="return branching_onclick()">Branching</h2>
    <img src="http://placehold.it/500x150&text=Branch+Action" alt="Branch Action" />
    <p>
      When Centipedde encounters a Branch Action, it executes an expression, and decides which action to execute next
      depending on the result.
    </p>
    <h3>Boolean values</h3>
    <p>
      The python engine behind all of Centipede's calculations uses a system known as dynamic typing.  That means that
      if one type of value is expected (e.g. a true or false boolean), and a different type is provided, it will 
      automatically try to convert it.  In a branch action, the result of the expression is expected to be boolean. 
      Luckily, most python values can be converted to a boolean using a few simple rules:
    </p>
    <ul>
      <li>
        The following values are false:
        <ul>
          <li>Any number equal to 0</li>
          <li>The empty string <kbd>""</kbd></li>
          <li>An empty sequence</li>
          <li><kbd>None</kbd></li>
        </ul>
      </li>
      <li>All other values of builtin types are True.</li>
    </ul>
    <p>
      If the expression is True, the action set in <i>Next Action if True</i> will be executed next.  Otherwise, flow
      will continue with the next action normally.
    </p>
    <h2 id="exercise">Exercise: Stepping a loop with incrementing variable</h2>
    <ol>
      <li>Add a variable action, use it to set a variable called <kbd>i</kbd> to 
        <kbd>0</kbd>.</li>
      <li>Add a message box action, use it to display the value of <kbd>i</kbd>.</li>
      <li>Add another variable action, use it increase <kbd>i</kbd> using the expression 
        <kbd>i + 1</kbd>.</li>
      <li>Use a branch action to check <kbd>i &lt; 10</kbd>, and to loop back to the 
        messagebox action if it is true</li>
      <li>How many times does the message box appear? Why?</li>
      <li>Set the branch action to loop back to the first Variable Action. Try running 
        now. Use Run &gt; Abort to stop.</li>
      <li>Create a new job. Add two variables, <kbd>i</kbd> equal to <kbd>1</kbd> and 
        <kbd>n</kbd> equal to <kbd>0</kbd>.</li>
      <li>Use two more variable actions to set <kbd>i</kbd> to <kbd>i * 2</kbd>, and to 
        set <kbd>n</kbd> to <kbd>n+1</kbd>.</li>
      <li>Use a branch action to loop until <kbd>i</kbd> is more than 1000.  What value will <kbd>n</kbd> 
        have afterwards?</li>
      <li>Use a messagebox to display <kbd>n</kbd> to check.</li>
    </ol>
  </body>
</html>